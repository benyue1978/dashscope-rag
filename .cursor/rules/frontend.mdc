---
description: frontend rules
alwaysApply: false
---
name: Next.js 前端规则（DashScope RAG 项目）
version: "1.0"
globs:
  - "frontend/**/*.{ts,tsx,js,jsx}"
triggers:
  - file_open
  - file_change
description: |
  本规则用于辅助生成符合项目结构与设计风格的前端代码，项目基于 Next.js + Tailwind CSS + Axios，作为 DashScope RAG 系统的用户界面。

rules:
  # 🧱 架构结构要求
  - 使用 App Router（Next.js 13+）
  - 所有页面放在 `frontend/app/` 下，组件放在 `frontend/components/` 下
  - 前端页面应调用后端 `/chat` 接口（POST 方法），传入 `content` 和 `user_query` 字段
  - 使用 `axios` 处理 API 请求
  - 使用 `useState` 和 `useEffect` 进行状态管理和副作用控制
  - 如果涉及复杂状态，请使用 `useReducer`

  # 🎨 UI 和样式要求
  - 使用 Tailwind CSS 编写样式，不使用 styled-components 或 CSS module
  - 所有 UI 元素风格尽量保持简洁、响应式，适配移动端
  - 推荐结构：文本输入框（content）、问题输入框（query）、发送按钮、回答展示框、引用展示区
  - 输入区域和输出区域建议使用卡片或白底圆角容器包裹

  # 📦 技术依赖要求
  - 使用 `axios` 发起 API 请求，必要时封装为 `lib/api.ts`
  - 使用 `classnames` 或 `clsx` 简化样式组合
  - 如果需要弹窗或加载提示，优先使用 `@headlessui/react` 或 `@radix-ui/react-*`

  # 🧪 质量与交互逻辑
  - 所有请求需处理异常：请求失败应提示用户
  - 增加 loading 状态控制（如按钮禁用、加载动画）
  - 所有用户输入应进行基本验证（非空，长度限制）
  - 组件命名使用 PascalCase，文件命名使用 kebab-case
  - 所有组件建议拆分为 `逻辑 + 展示` 两层（如 `ChatBox.tsx + useChat.ts`）

  # 🧠 AI 行为建议
  - 生成页面时默认包含输入区、结果区、调用接口逻辑
  - 编写组件时请说明 props 类型与使用方式
  - 如果生成的组件过大（>100行），请自动拆分为子组件并放入 components 文件夹
  - 如果组件与后端接口绑定，生成说明注释标明接口字段结构

references:
  - components/ChatBox.tsx
  - app/page.tsx
  - lib/api.ts